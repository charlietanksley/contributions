var search_data = {"index":{"searchIndex":["contributions","contributions","git","githubapi","repositorylist","stringutils","add()","add()","clone()","contributions()","contributions()","contributions=()","contributions_as_hash()","forks()","get_contributions()","key_value_pairs()","load_contributions()","log_format()","name()","new()","new()","only()","only()","parent()","practically_empty?()","project_names()","read_log()","remove()","remove()","remove_empty()","repos()","repositories()","repositories=()","repository()","setup_repositories()","short_dates()","split!()","string_to_hash()","update()","user()","zip_to_hash()"],"longSearchIndex":["contributions","contributions::contributions","contributions::git","contributions::githubapi","contributions::repositorylist","contributions::stringutils","contributions::contributions#add()","contributions::repositorylist#add()","contributions::git::clone()","contributions::contributions#contributions()","contributions::git::contributions()","contributions::contributions#contributions=()","contributions::contributions#contributions_as_hash()","contributions::githubapi::forks()","contributions::contributions#get_contributions()","contributions::repositorylist#key_value_pairs()","contributions::contributions#load_contributions()","contributions::git::log_format()","contributions::githubapi::name()","contributions::contributions::new()","contributions::repositorylist::new()","contributions::contributions#only()","contributions::repositorylist#only()","contributions::githubapi::parent()","contributions::stringutils::practically_empty?()","contributions::contributions#project_names()","contributions::git::read_log()","contributions::contributions#remove()","contributions::repositorylist#remove()","contributions::stringutils::remove_empty()","contributions::githubapi::repos()","contributions::contributions#repositories()","contributions::contributions#repositories=()","contributions::githubapi::repository()","contributions::contributions#setup_repositories()","contributions::stringutils::short_dates()","contributions::stringutils::split!()","contributions::stringutils::string_to_hash()","contributions::contributions#update()","contributions::githubapi::user()","contributions::stringutils::zip_to_hash()"],"info":[["Contributions","","Contributions.html","",""],["Contributions::Contributions","","Contributions/Contributions.html","",""],["Contributions::Git","","Contributions/Git.html","",""],["Contributions::GithubAPI","","Contributions/GithubAPI.html","",""],["Contributions::RepositoryList","","Contributions/RepositoryList.html","",""],["Contributions::StringUtils","","Contributions/StringUtils.html","",""],["add","Contributions::Contributions","Contributions/Contributions.html#method-i-add","(repos)","<p>Add a repository (or array of repositories).\n<p>repos &mdash; a ‘username/repository’ String or Array of such strings. …\n\n"],["add","Contributions::RepositoryList","Contributions/RepositoryList.html#method-i-add","(repos)","<p>Add a string or array of strings to the repository list.\n<p>repos &mdash; a string or an array of strings (each of …\n\n"],["clone","Contributions::Git","Contributions/Git.html#method-c-clone","(repository, &block)","<p>Clone a repository and run the block passed inside the newly cloned\nrepository.\n<p>repository &mdash; a ‘username/repository_name …\n"],["contributions","Contributions::Contributions","Contributions/Contributions.html#method-i-contributions","()","<p>attr_reader for @contributions.  This method really only exists for\ntesting.\n<p>Returns a Hash.\n"],["contributions","Contributions::Git","Contributions/Git.html#method-c-contributions","(user, repository)","<p>Get all the contributions in a repository by a user (contributions for\nwhich the user is the <strong>author</strong>). …\n"],["contributions=","Contributions::Contributions","Contributions/Contributions.html#method-i-contributions-3D","(hash)","<p>attr_accessor for @contributions.  This method really only exists for\ntesting.\n<p>hash &mdash; a hash.\n\n<p>Returns a  …\n"],["contributions_as_hash","Contributions::Contributions","Contributions/Contributions.html#method-i-contributions_as_hash","()","<p>Return a user’s OSS contributions as a hash.  If the hash hasn’t already\nbeen determined, the contributions …\n"],["forks","Contributions::GithubAPI","Contributions/GithubAPI.html#method-c-forks","(username)","<p>Get just the user’s repositories that are forks.\n<p>Returns an Array.\n"],["get_contributions","Contributions::Contributions","Contributions/Contributions.html#method-i-get_contributions","(repository)","<p>Get the user’s contributions to the repository.\n<p>Returns a Hash.\n"],["key_value_pairs","Contributions::RepositoryList","Contributions/RepositoryList.html#method-i-key_value_pairs","()","<p>Turn repositories into key value pairs.\n<p>Returns an Array of Hashes {:username, :repository}\n"],["load_contributions","Contributions::Contributions","Contributions/Contributions.html#method-i-load_contributions","()","<p>Determine a user’s contributions and load the @contributions ivar.\n<p>Returns a Hash.\n"],["log_format","Contributions::Git","Contributions/Git.html#method-c-log_format","()",""],["name","Contributions::GithubAPI","Contributions/GithubAPI.html#method-c-name","(username)","<p>Get the name of the user.\n<p>username &mdash; github username.\n\n<p>Returns a String.\n"],["new","Contributions::Contributions","Contributions/Contributions.html#method-c-new","(opts={})","<p>opts &mdash; a Hash with, at the very least, a username.  Optional arguments include\n:remove (to ignore some …\n\n"],["new","Contributions::RepositoryList","Contributions/RepositoryList.html#method-c-new","(*args)",""],["only","Contributions::Contributions","Contributions/Contributions.html#method-i-only","(repos)","<p>Replace the user’s forked repositories with the specified repositories.\n<p>repos &mdash; a ‘username/repository_name …\n\n"],["only","Contributions::RepositoryList","Contributions/RepositoryList.html#method-i-only","(repos)","<p>Replace list of repositories with the list provided.\n<p>repos &mdash; a string or an array of strings (each of which …\n\n"],["parent","Contributions::GithubAPI","Contributions/GithubAPI.html#method-c-parent","(repository)","<p>Get the name of the forked repository.\n<p>repository &mdash; a ‘username/repository_name’ string.\n\n<p>Returns a String …\n"],["practically_empty?","Contributions::StringUtils","Contributions/StringUtils.html#method-c-practically_empty-3F","(arg)","<p>Determine whether a string has any content.\n<p>Examples:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">StringUtils</span>.<span class=\"ruby-identifier\">practically_empty?</span>(<span class=\"ruby-string\">''</span>)\n<span class=\"ruby-comment\"># =&gt; true</span>\n<span class=\"ruby-constant\">StringUtils</span>.<span class=\"ruby-identifier\">practically_empty?</span>(<span class=\"ruby-string\">&quot;\\n\\n&quot;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["project_names","Contributions::Contributions","Contributions/Contributions.html#method-i-project_names","()","<p>Provide the names for all the forked projects.\n<p>Example:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">user</span>.<span class=\"ruby-identifier\">repositories</span>\n<span class=\"ruby-comment\"># =&gt; ['r/r', 's/s']</span>\n<span class=\"ruby-identifier\">user</span>.<span class=\"ruby-identifier\">project_names</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["read_log","Contributions::Git","Contributions/Git.html#method-c-read_log","(user)","<p>The command to read the git log.\n<p>user &mdash; the user’s name.\n\n<p>Returns nothing.\n"],["remove","Contributions::Contributions","Contributions/Contributions.html#method-i-remove","(repos)","<p>Remove a repository (or array of repositories).\n<p>repos &mdash; a ‘username/repository’ String or Array of such …\n\n"],["remove","Contributions::RepositoryList","Contributions/RepositoryList.html#method-i-remove","(repos)","<p>Remove a string or array of strings from the repository list.\n<p>repos &mdash; a string or an array of strings (each …\n\n"],["remove_empty","Contributions::StringUtils","Contributions/StringUtils.html#method-c-remove_empty","(array)","<p>Remove any empty arrays after a split.\n<p>array &mdash; an array of Strings.\n\n<p>Returns an Array of Strings (modified) …\n"],["repos","Contributions::GithubAPI","Contributions/GithubAPI.html#method-c-repos","(username)","<p>Get all the user’s repositories.\n<p>Returns an Array.\n"],["repositories","Contributions::Contributions","Contributions/Contributions.html#method-i-repositories","()","<p>Accessor method for the @repositories ivar.\n<p>Returns an Array of ‘username/repository_name’ strings.\n"],["repositories=","Contributions::Contributions","Contributions/Contributions.html#method-i-repositories-3D","(array)","<p>Accessor method for the @repositories ivar.\n<p>array &mdash; an array of ‘username/repository_name’ strings.\n\n<p>Returns …\n"],["repository","Contributions::GithubAPI","Contributions/GithubAPI.html#method-c-repository","(repository)","<p>Get the repository info (all of it) from github.\n<p>repository &mdash; a ‘username/repository_name’ string.\n\n<p>Returns …\n"],["setup_repositories","Contributions::Contributions","Contributions/Contributions.html#method-i-setup_repositories","(opts)","<p>Generate an array of forked repositories for the user. This array is set as\nthe @repositories variable. …\n"],["short_dates","Contributions::StringUtils","Contributions/StringUtils.html#method-c-short_dates","(hash)","<p>Convert date format to a simpler one.\n<p>hash &mdash; a hash with a :date key\n\n<p>Returns a Hash.\n"],["split!","Contributions::StringUtils","Contributions/StringUtils.html#method-c-split-21","(string, separator)","<p>Split the string on the give separator.\n<p>separator &mdash; the character(s) on which to split the string.\n\n<p>Returns …\n"],["string_to_hash","Contributions::StringUtils","Contributions/StringUtils.html#method-c-string_to_hash","(string, keys, separator, *ending)","<p>Read a long string of commit data and turn it into a hash.\n<p>string &mdash; a string of commit data.\n<p>separator &mdash; the …\n"],["update","Contributions::Contributions","Contributions/Contributions.html#method-i-update","(opts)","<p>Combine the user’s explicit preferences with an array of forks.\n<p>Returns an Array.\n"],["user","Contributions::GithubAPI","Contributions/GithubAPI.html#method-c-user","(username)","<p>Get the user info (all of it) from github.\n<p>username &mdash; github username.\n\n<p>Returns a Hash.\n"],["zip_to_hash","Contributions::StringUtils","Contributions/StringUtils.html#method-c-zip_to_hash","(keys, values)","<p>Convert a pair of arrays into a hash with the first as keys.\n<p>keys &mdash; an Array of keys.\n<p>values &mdash; an Array of …\n"]]}}